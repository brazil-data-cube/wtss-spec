openapi: 3.0.1
info:
  version: '2.0'
  title: Web Time Series Service
  description: >
        Web Time Series Service (WTSS) is a lightweight web service for handling time series data from remote sensing imagery. Given a location and a time interval you can retrieve the according time series as a JSON array of numbers.

        There are free and open source implementations based on this specification:

        - [wtss-server](https://github.com/brazil-data-cube/wtss-server): WTSS web server implemented in Python.

        - [wtss.py](https://github.com/brazil-data-cube/wtss.py): Client API for Python.

        - [wtss](https://github.com/e-sensing/wtss): Client API for R.
servers:
    - url: 'https://brazildatacube.dpi.inpe.br/wtss'
      description: Production server

    - url: 'http://brazildatacube.dpi.inpe.br/dev/wtss'
      description: Development server
paths:
  /:
    get:
      tags:
        - Capabilities
      summary: landing page
      description: |-
        The landing page provides links to the API definition, the conformance
        statements and to the feature collections in this dataset.
      operationId: getLandingPage
      responses:
        '200':
          $ref: '#/components/responses/LandingPage'
        '500':
          $ref: '#/components/responses/ServerError'
  
  '/{collectionId}/timeseries':
    get:
      operationId: timeSeriesGET
      summary: Fetch time series using GET method
      tags:
        - TimeSeries
      responses:
        '200':
          description: Get a Time Series of a given Collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeseries'
              examples:
                timeseries_result:
                  $ref: '#/components/examples/timeseries_result'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/applySensorScale'
        - $ref: '#/components/parameters/pixelCollisionType'
    post:
      operationId: timeSeriesPOST
      summary: Fetch time series using POST method
      tags:
        - TimeSeries
      parameters:
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchBody_timeseries_POST'
            examples:
              timeseries_POST_query:
                $ref: '#/components/examples/timeseries_POST_query'
                  
      responses:
        '200':
          description: Get a Time Series of a given Collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeseries'
              examples:
                timeseries_result:
                  $ref: '#/components/examples/timeseries_result'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  
  '/{collectionId}/summarize':
    get:
      operationId: timeSeriesSummarizeGET
      summary: Gets the aggregated time series for an geometry
      tags:
        - Summarize
      responses:
        '200':
          description: Get the area time series statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/summarized'
              examples:
                summarize_result:
                  $ref: '#/components/examples/summarize_result'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/attributes'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/aggregation'
        - $ref: '#/components/parameters/applySensorScale'
        - $ref: '#/components/parameters/pixelCollisionType'
    
    post:
      operationId: timeSeriesSummarizePOST
      summary: Gets the aggregated time series for an geometry
      tags:
        - Summarize
      parameters:
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchBody_summarize_POST'
            examples:
              timeseries_result:
                $ref: '#/components/examples/summarize_POST_query'
      responses:
        '200':
          description: Get the area time series statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/summarized'
              examples:
                summarize_result:
                  $ref: '#/components/examples/summarize_result'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    geom:
      name: geom
      description: >-
        The GeoJSON representation to retrieve time series for the given location.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/geom'
      style: form
      explode: false
    
    datetime:
      name: datetime
      in: query
      description: >-
        Either a datetime or an open or closed range. Date and time expressions follow the RFC 3339 standard. Open ranges are expressed using double dots.
        
        Examples:

        * A date-time (e.g. "2018-02-12T23:20:50Z"): In this way, the search will query data whose date is equal to the specified date.


        * A closed interval (e.g. "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"): In this way, the search will query data whose date is greater than or equal to the specified start date and less than or equal to the specified end date.


        * Open intervals (e.g. "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"): In this way, the search will query data whose date is greater than or equal to the specified start date, or data whose date is less than or equal to the specified end date.


        Only features that have a temporal property that intersects the value of datetime are selected.

        If a feature has multiple temporal properties, it is the decision of the server whether only a single temporal property is used to determine the extent or all relevant temporal properties.
        
      required: false
      schema:
        type: string
      style: form
      explode: false
      example: "2018-02-12T23:20:50Z"
    
    attributes:
      name: attributes
      in: query
      description: A List of attribute names of a Collection.
      required: true
      schema:
        type: array
        items:
          type: string
      explode: false
    
    collectionId:
      name: collectionId
      in: path
      description: Identifier of a STAC collection
      required: true
      schema:
        type: string
    
    aggregation:
      name: aggregation
      in: query
      description: >-
      
        The aggregation methods applied in time series values.
        
        
        **Function only available when the geometry is not a point!**

        
        To use this feature, the user must add the desired metrics to the array. For example:
        
        
        * User wants average pixels for each date: ["mean"]
        
        * User wants minimum and maximum pixels for each date: ["min", "max"]
        
        
        Available metrics are listed below:
        
        * **min:** Each array item contains the smallest pixel value for that date.
        
        * **max:** Each array item contains the largest pixel value for that date.
        
        * **mean:** Each array item contains the average pixel values for that date.
        
        * **median:** Each array item contains the median of the pixel values for that date.
        
        * **std:** Each array item contains the standard deviation of the average pixel values for that date.
  
      required: false
      schema:
        $ref: '#/components/schemas/aggregation'
    
    applySensorScale:
      name: applySensorScale
      in: query
      description: Apply the scale factor and scale factor offset along the time series values
      schema:
        type: boolean
        default: false
    
    pixelCollisionType:
      name: pixelCollisionType
      in: query
      description: Use a geospatial method to retrieve pixel intersection.
      schema:
        $ref: '#/components/schemas/pixelCollisionType'

  schemas:
    landing:
      type: object
      description: >-
        The index url resource of WTSS server.
      properties:
        wtss_version:
          $ref: '#/components/schemas/wtss_version'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    
    link:
      type: object
      description: >-
        Describes a relationship with another link entity.
      properties:
        href:
          description: Define the actual link in the format of an URL. Relative and absolute links are both allowed.
          type: string
        rel:
          description: The Relationship between the current document and the linked documents
          type: string
        type:
          description: The application media type of the document.
          type: string
        title:
          description: A human readable title to be used in rendered displays of the link.
          type: string
    
    timeseries:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              pixel_size:
                type: array
                minItems: 2
                maxItems: 2
                items:
                  type: number
              pixel_center: 
                $ref: '#/components/schemas/geom'
              timeseries:
                type: object
                properties:
                  values:
                    type: object
                    properties:
                      EVI:
                        type: array
                        minItems: 1
                        items:
                          type: number
                      NDVI:
                        type: array
                        minItems: 1
                        items:
                          type: number
                  timeline:
                    type: array
                    items:
                      type: string
        query:
          type: object
          properties:
            geom:
              $ref: '#/components/schemas/geom'
            request:
              type: object
              properties:
                completed:
                  type: boolean
                  default: False
                nextURL:
                  type: string
                query_offset:
                  type: number
    
    summarized:
      type: object
      properties:
        results:
          type: object
          properties:
            values:
              type: object
              properties:
                NDVI:
                  type: object
                  properties:
                    mean:
                      type: array
                      minItems: 1
                      items:
                        type: number
                    std:
                      type: array
                      minItems: 1
                      items:
                        type: number
                EVI:
                  type: object
                  properties:
                    mean:
                      type: array
                      minItems: 1
                      items:
                        type: number
                    std:
                      type: array
                      minItems: 1
                      items:
                        type: number
            timeline:
              type: array
              items:
                type: string
        query:
          type: object
          properties:
            geom:
              $ref: '#/components/schemas/geom'
            request:
              type: object
              properties:
                completed:
                  type: boolean
                  default: False
                nextURL:
                  type: string
                query_offset:
                  type: number

    pixelCollisionType:
      type: string
      enum:
        - center
        - upperLeft
        - upperRight
        - lowerLeft
        - lowerRight
      default: 'center'
      
    pixelCollisionType_POST_query:
      type: object
      properties:
        pixelCollisionType:
          type: string
          enum:
            - center
            - upperLeft
            - upperRight
            - lowerLeft
            - lowerRight
          default: 'center'
    
    aggregation:
      type: array
      items:
        type: string
        enum:
          - mean
          - median
          - min
          - max
          - std
          
    aggregation_POST_query:
      type: object
      properties:
        aggregation:
          type: array
          items:
            type: string
            enum:
              - mean
              - median
              - min
              - max
              - std
    
    applySensorScale_POST_query:
      type: object
      properties:
        applySensorScale:
          type: boolean
          default: false
    
    searchBody_timeseries_POST:
      description: >-
        The Parameters for Time Series Request.
      type: object
      allOf:
        - $ref: '#/components/schemas/geomFilter'
        - $ref: '#/components/schemas/attributesFilter'
        - $ref: '#/components/schemas/datetimeFilter'
        - $ref: '#/components/schemas/applySensorScale_POST_query'
        - $ref: '#/components/schemas/pixelCollisionType_POST_query'
    
    searchBody_summarize_POST:
      description: >-
        The Parameters for Summarized Time Series Request.
      type: object
      allOf:
        - $ref: '#/components/schemas/geomFilter'
        - $ref: '#/components/schemas/attributesFilter'
        - $ref: '#/components/schemas/datetimeFilter'
        - $ref: '#/components/schemas/aggregation_POST_query'
        - $ref: '#/components/schemas/applySensorScale_POST_query'
        - $ref: '#/components/schemas/pixelCollisionType_POST_query'

    datetimeFilter:
      description: An object representing a date+time based filter.
      type: object
      properties:
        datetime:
          type: string
    
    attributesFilter:
      description: An object representing a date+time based filter.
      type: array
      items:
        type: string
      required:
        - attributes
      properties:
        attributes:
          type: array
          minItems: 1
          items:
            type: string
    
    geom:
      type: object
      oneOf:
        - $ref: 'https://geojson.org/schema/Point.json'
        # - $ref: 'https://geojson.org/schema/MultiPoint.json'
        - $ref: 'https://geojson.org/schema/Polygon.json'
        # - $ref: 'https://geojson.org/schema/MultiPolygon.json'
    
    geomFilter:
      type: object
      description: Only returns items that intersect with the provided polygon.
      required:
        - geom
      properties:
        geom:
          oneOf:
            - $ref: 'https://geojson.org/schema/Point.json'
            # - $ref: 'https://geojson.org/schema/MultiPoint.json'
            - $ref: 'https://geojson.org/schema/Polygon.json'
            # - $ref: 'https://geojson.org/schema/MultiPolygon.json'
    
    exception:
      type: object
      description: >-
        Information about the exception: an error code plus an optional
        description.
      required:
        - code
      properties:
        code:
          type: string
        description:
          type: string
    
    wtss_version:
      type: string
      description: WTSS version
  
  responses:
    InvalidParameter:
        description: A query parameter has an invalid value.
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
    NotFound:
        description: The requested URI was not found.
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
    ServerError:
        description: A server error occurred.
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/exception'
    LandingPage:
        description: Landing Page
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/landing'

  examples:
    
    timeseries_POST_query:
      summary: Time Series POST Query Example
      value:
        geom: 
          type: Point
          coordinates: [-52.63215, -28.31698]
        attributes: ['NDVI', 'EVI', 'RED']
        datetime: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        applySensorScale: true
        pixelCollisionType: "center"
    
    summarize_POST_query:
      summary: Summarize POST Query Example
      value:
        geom: 
          type: Point
          coordinates: [-52.63215, -28.31698]
        attributes: ['NDVI', 'EVI', 'RED']
        datetime: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"
        aggregation: ['mean', 'median', 'std']
        applySensorScale: true
        pixelCollisionType: "center"
        
    timeseries_result:
      summary: Time Series Result Example
      value:
        results:
          pixel_size: [64.0001, 64.00009]
          pixel_center:
            type: Point
            coordinates: [-52.63215, -28.31698]
          timeseries:
            values:
              NDVI: [0.365, 0.425, 0.468, 0.563, 0.602, 0.762, 0.530]
              EVI: [0.394, 0.563, 0.572, 0.630, 0.790, 0.860, 0.652]
              timeline: ["2018-01-01T00:00:00Z", "2018-01-17T00:00:00Z", "2018-02-02T00:00:00Z", "2018-02-18T00:00:00Z", "..."]
        query:
          geom:
            type: Point
            coordinates: [-52.63215, -28.31698]
          request:
            completed: False
            nextURL: "https://brazildatacube.dpi.inpe.br/wtss/MOD13Q1-6/timeseries?ya0gsqhy4wzvuvb4"
            query_offset: 999
          
    summarize_result:
      summary: Summarize Result Example
      value:
        results:
          values:
            NDVI:
              mean: [0.365, 0.425, 0.468, 0.563, 0.602, 0.762, 0.530]
              std: [0.394, 0.563, 0.572, 0.630, 0.790, 0.860, 0.652]
            EVI:
              mean: [0.365, 0.425, 0.468, 0.563, 0.602, 0.762, 0.530]
              std: [0.394, 0.563, 0.572, 0.630, 0.790, 0.860, 0.652]
          timeline: ["2018-01-01T00:00:00Z", "2018-01-17T00:00:00Z", "2018-02-02T00:00:00Z", "2018-02-18T00:00:00Z", "..."]
        query:
          geom:
            type: Point
            coordinates: [-52.63215, -28.31698]
          request:
            completed: False
            nextURL: "https://brazildatacube.dpi.inpe.br/wtss/MOD13Q1-6/timeseries?ya0gsqhy4wzvuvb4"
            query_offset: 999

externalDocs:
  description: Web Time Series Service specification repository.
  url: 'https://github.com/brazil-data-cube/wtss-spec'
